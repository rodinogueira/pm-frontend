name: CI/CD Pipeline para EC2

on:
  push:
    branches:
      - main  # Executa o pipeline ao fazer push na branch 'main'

jobs:
  build:
    runs-on: ubuntu-latest  # Usando Ubuntu como runner do GitHub Actions

    steps:
      # Passo 1: Fazer checkout do código
      - name: Checkout do código
        uses: actions/checkout@v2

      # Passo 2: Instalar dependências
      - name: Instalar dependências
        run: npm install --legacy-peer-deps --force

      # Passo 3: Gerar o build
      - name: Gerar build
        run: npm run build

      # Passo 4: Fazer deploy para EC2
      - name: Fazer deploy para EC2
        run: |
          # Salvar a chave SSH privada em um arquivo temporário
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > my-key
          chmod 600 my-key

          # Verificar o diretório de build e imprimir o caminho atual
          echo "Verificando arquivos no diretório de build:"
          pwd  # Exibe o diretório atual

          # Verificar os arquivos no diretório de build
          echo "Verificando arquivos no diretório de build:"
          ls -la ./build

          # Garantir permissão no diretório de destino no EC2
          echo "Garantir permissão:"
          ssh -i my-key -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "sudo chown -R ec2-user:ec2-user /usr/share/nginx/html"

          # Copiar arquivos do build para a instância EC2
          echo "Copiando arquivos para EC2..."
          scp -i my-key -o StrictHostKeyChecking=no -r ./build/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/usr/share/nginx/html/

          # Reiniciar o nginx após o deploy
          ssh -i my-key -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "sudo systemctl restart nginx"
          
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
